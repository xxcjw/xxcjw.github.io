[{"content":"git设置代理 开vpn之后，当你还在为能正常打开Github、Youtobe而窃喜时，不知道你是否也遇到过这种情况：\n但当你使用git工具将本地代码文件上传Github时，却总是出现Failed to connect to github.com port 443: Timed out或者OpenSSL SSL_read: Connection was reset, errno 10054等git push失败的情况，让人火大。 或者发现git clone命令速度特别慢，有时还经常卡掉，这很让人着急。 总之，就四个字：失败、火大！于是搜各种教程，经过各种折腾，终于找到解决方案，归根结底还是因为代理设置的不正确！！！本文记录一下解决的方案。\n问题描述 简单来说，就是所使用的vpn正常，但是上传或下载Github文件时就很慢很卡，甚至连接不上出现报错情况。如果遇到这种情况，可以使用下面的方法解决。\n如果检查自己的vpn是否正常呢？有两种简单办法\n最简单的当然就是打开一个国外网站，比如YouTube等，如果能打开，证明梯子没问题； 另一种，就是win+r打开命令行，输入ping github.com看看能不能连上要使用的Github； 解决方法 遇到上述问题，就是代理设置不正确。可以通过以下命令查看和设置理。\n1、代理查询\n查看自己是否以前设置过代理，在CMD中输入以下命令进行查询\n1 2 git config --global http.proxy git config --global https.proxy 如果没有记录显示，则说明本电脑还没有配置过代理，否则需要先将代理进行删除，再进行后续的重新添加。\n2、代理取消\n如果执行上述代码之后，发现有代理存在，则执行下述命令，先将代理取移除\n1 2 git config --global --unset http.proxy git config --global --unset https.proxy git config 是 Git 用于配置和管理各种参数的命令，可以设置和修改与 Git 相关的配置选项。\nhttp.proxy 是用于设置 Git 在进行 HTTP 或 HTTPS 连接时使用的代理服务器。\n3、代理设置\n首先需要获取当前所使用vpn的代理服务器地址，格式为：127.0.0.1:xxxx（我的是7879）。这里一定要注意，不要照抄网上的端口号，需要根据自己的服务器进行修改，否则报错。得到代理服务器地址之后，使用如下命令配置代理\n1 2 git config --global https.proxy 127.0.0.1:7897 git config --global http.proxy 127.0.0.1:7897 如何知道自己的代理服务器地址呢？两种办法：\n一是通过自己的vpn查看，打开自己的vpn-设置-端口设置/端口号的选项，这个就是代理服务器的端口 打开电脑的控制面板-网络和Internet-Internet选项-连接-局域网设置，然后就可以看到代理服务器的地址了，见图 通过这两种方式得到的应该是一样的。\n然后就配置成功了！就可以成功上传和下载文件了。需要注意的是，有少数人刚配置后，效果显著，但用一段时间之后，发现git push上传文件时仍然失败，这时候按照第二个步骤将代理重新取消掉就好了，如果有过一段时间又不行了，在重新配置就行，这样反复操作可以解决，但为什么这样不得而知。\n原理介绍 代理服务器就是你的电脑和互联网的中介。当您访问外网时 , 你的请求首先转发到代理服务器，然后代理服务器替你访问外网，并将结果原封不动的给你的电脑，这样你的电脑就可以看到外网的内容啦。\n使用vpn后无法正常上网 解决方法 很多同学使用vpn访问外网，但当关闭VPN后，却发现没有办法正常连接到互联网了。解决方法如下：\n1 控制面板--\u0026gt;网络和Internet--\u0026gt;Internet选项--\u0026gt;弹出的Internet属性窗口--\u0026gt;连接--\u0026gt;局域网设置 将为LAN使用代理服务器（这些设置不用于拨号或VPN连接）前面的√取消掉可以了（开vpn的时候勾上是正常的，如果关掉vpn后能正常上网就不用取消）。到此为止不出意外就可以正常上网啦！\n原因分析 一句话：可能是由于VPN代理软件修改了电脑IP地址的获取方式。\n通常情况下，计算机的IP地址是通过动态主机配置协议（DHCP）从您的路由器或网络提供商的服务器上获取的。使用VPN代理软件时，它会在您的计算机和互联网之间创建一个安全的连接。在这种连接中，VPN软件会通过在您的计算机和VPN服务器之间建立虚拟通道来代理您的网络流量。当您的网络流量通过VPN服务器时，服务器会为您的流量分配一个新的IP地址。\n通过这些步骤，VPN代理软件成功修改了您计算机的IP地址获取方式。现在，计算机使用的是VPN服务器分配的IP地址，而不是原本的IP地址。这样做可以帮助您隐藏真实的IP地址并实现匿名上网，同时提供加密保护，确保您的网络流量在传输过程中得到安全保护。同时，当我们关闭VPN后，由于电脑IP地址任然为VPN分配的IP地址（而此时我们已经关闭了代理服务器的连接），这就导致我们无法正常访问互联网了。\n参考：使用vpn/代理后无法正常上网\n","date":"2025-04-10T20:18:22+08:00","permalink":"https://xxcjw.github.io/p/%E4%BB%A3%E7%90%86-%E8%81%94%E7%BD%91%E9%97%AE%E9%A2%98/","title":"代理 \u0026 联网问题"},{"content":"最常用 1 2 3 4 5 6 7 8 9 10 win + l #快速锁屏 ctrl + f #查找 alt + tab #切换页面 win + v #粘贴板 win + space #切换中英文 shift + delete #完全删除文件 tab #选中多行按tab一起缩进 shift + tab #多行取消缩进 ctrl + alt + . #黑屏时可关机、打开任务管理器 ctrl + alt + delete #黑屏时可关机、打开任务管理器 截图快捷键\n1 2 3 win + shift + s #自带截图 alt + z #截图软件截图 alt + a #微信截图 命令行类命令 系统信息查看类 1 2 3 4 5 6 nvidia-smi #查看gpu使用情况 ipconfig #显示ip地址信息 watch -n 1 nvidia-smi #动态追踪查看显存占用 ping xxx #查看本机能否连通某网址 free -h #查看服务器内存（Mem-物理内存，Swap-交换空间） df -h #查看服务器外存/硬盘使用情况（use%表示使用率） 会话管理指令 1 2 3 4 5 screen -S xxxx #创建会话，如screen -S test ctrl+a d #退出会话同时保持程序运行(按住Ctrl，依次再按a,d) screen -r xxxx #恢复会话，如screen -r test exit / ctrl+d #关闭会话，会提示：screen is terminating screen -ls #列出当前存在的会话列表 文件目录操作类 1 2 3 4 5 6 7 8 9 10 ⬆/⬇ #切换历史命令 cd ./xx #切换到某某文件夹 pwd #显示当前工作目录的完整路径 ls #列出当前目录中的文件（-l、-a） source xxx #在当前会话中执行某个脚本，使其立即生效 mkdir xxx #创建一个新目录 rmdir xxx #删除空目录（-p 一次删除多个空文件夹；-r 递归删除） rm xxx #删除不为空的文件或目录（-r递归删除，常用在目录删除） cp source destination #复制文件或目录到指定文件夹下 mv source destination #移动文件或目录 进程管理类 1 2 3 4 5 6 7 8 ps -p \u0026lt;PID\u0026gt; #查看进程信息（看不到使用者） ps -f -p \u0026lt;PID\u0026gt; #查看进程详细信息（f表示full，全部信息） kill \u0026lt;PID\u0026gt; #根据进程号杀死进程 kill -9 \u0026lt;PID\u0026gt; #强制杀死进程 top #实时监控系统中各个进程的资源占用情况 shutdown -h now #服务器立刻关机 shutdown -h 10 #10 分钟后自动关机 shutdown -r now #重启（=reboot也是重启） 文本处理类 1 2 3 4 5 grep \u0026#34;Hello\u0026#34; xx.txt #文本搜索指令，从txt文件中搜索包含指定字符串的行 grep -i \u0026#34;hello\u0026#34; xx.txt #忽略大小写搜索 grep -r \u0026#34;hello\u0026#34; /data #递归搜索，在一个目录搜索包含指定字符串的行 grep -n \u0026#34;Hello\u0026#34; xx.txt #显示匹配行的行号 grep -inr \u0026#34;hello\u0026#34; . #组合使用，点代表在当前目录下搜索 浏览器快捷键 1 2 3 4 5 ctrl + l #定位到地址栏（可通过设置后，通过应用快速打开某程序） ctrl + t #新建标签页 ctrl + shift + t #重新打开刚才关闭的标签页 ctrl + tab #切换标签页 ctrl + n #打开一个新的浏览器窗口 typora快捷键 1 2 3 4 5 6 7 ``` #插入代码块 $$ #插入公式 enter/shift + enter #不一样的换行方式 ctrl + t #新建表格 ctrl + enter #表格插入行 ctrl + shift + back #删除表格指定行 []() #插入链接（前面加个“!”就是插入图片） vim快捷键 1 2 3 :q #退出（如果有更改不会保存） :wq #保存并退出 :q! #强制退出并丢弃未保存的更改 快捷键大全网址：\n快捷键速查表 - 星云导航\n快捷键备忘录\n","date":"2025-04-10T16:30:06+08:00","permalink":"https://xxcjw.github.io/p/%E7%94%B5%E8%84%91%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/","title":"电脑相关指令"},{"content":"文章插入图片 如果想要在文章插入图片，有两种方式：\n方式一： 1 ![name](pic.png) 缺点是这种方式插入的图片不可以调节大小，默认占满页面宽度，很不美观。\n方式二： 1 \u0026lt;img src=\u0026#34;1.png\u0026#34; width=\u0026#34;80%\u0026#34; align=\u0026#34;middle\u0026#34; style=\u0026#34;zoom:60%;\u0026#34; /\u0026gt; 如果是在markdown文件里，是居中且缩放到原图的60%大小，但在网页上居中不起作用。\n方式三： 1 \u0026lt;center\u0026gt;\u0026lt;img src=\u0026#34;1.png\u0026#34; width=\u0026#34;80%\u0026#34; align=\u0026#34;middle\u0026#34; style=\u0026#34;zoom:60%;\u0026#34; /\u0026gt;\u0026lt;/center\u0026gt; 这样就可以实现图片居中且缩放成任意比例。\n友链布局修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 title: 友链 slug: \u0026#34;links\u0026#34; layout: \u0026#34;links\u0026#34; menu: main: weight: -50 params: icon: link comments: false links: - title: GitHub description: 全世界最大的代码托管和开源项目平台. website: https://github.com image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png sites: - title: GitHub description: 全世界最大的代码托管和开源项目平台. website: https://github.com image: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png 现在想要实现的效果如图所示，即按照类别来划分友链，如何实现呢？\n首先，在content/page/links/index.md文件中新建一个链接名，如links、sites等，然后把想要插入的友链放入； 然后，在layouts/page/links.html文件中写入如下代码。其中，xxxs就是上面的链接名，如links、sites等；类别名就是想要的分类名称，如推荐大佬、科技\u0026amp;论坛； 1 2 3 4 5 6 7 \u0026lt;header\u0026gt; \u0026lt;h2 class=\u0026#34;section-title\u0026#34; style=\u0026#34;margin-bottom: -20px;\u0026#34;\u0026gt;类别名\u0026lt;/h2\u0026gt; \u0026lt;/header\u0026gt; {{ if .Params.xxxs }} {{ partial \u0026#34;article/components/xxxs\u0026#34; . }} {{ end }} 最后，在layouts/partials/article/components文件下新建xxxs.html文件，文件不存在的就复制一下其他的（代码如下），然后将旧链接名修改为新建的链接名； 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 \u0026lt;div class=\u0026#34;article-list--compact links\u0026#34;\u0026gt; {{ range $i, $hugo := .Params.hugos }} \u0026lt;article\u0026gt; \u0026lt;a href=\u0026#34;{{ $hugo.website }}\u0026#34; target=\u0026#34;_blank\u0026#34; rel=\u0026#34;noopener\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; \u0026lt;h2 class=\u0026#34;article-title\u0026#34;\u0026gt; {{- $hugo.title -}} \u0026lt;/h2\u0026gt; \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; {{ with $hugo.description }} {{ . }} {{ else }} {{ $hugo.website }} {{ end }} \u0026lt;/footer\u0026gt; \u0026lt;/div\u0026gt; {{ with $hugo.image }} {{ $permalink := . }} {{ with ($.Resources.GetMatch (printf \u0026#34;%s\u0026#34; (. | safeURL))) }} {{ $permalink = .RelPermalink }} {{ end }} \u0026lt;div class=\u0026#34;article-image\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ $permalink }}\u0026#34; loading=\u0026#34;lazy\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/div\u0026gt; 文章内链跳转 写文章的时候总有一个需求就是关联之前写的文章，那么在hugo中应该要怎么用呢？\n方法一：markdown语法\n使用[]()创建链接，比如hugo常用命令。此方法缺点就是文章标题和链接变了，所有地方都需要手动修改。在测试的时候甚至会出现点击后会出现404找不到界面。\n方法二：hugo提供的ref功能\n用法如下所示（哈哈去掉），此方法的好处就是文章的链接变了，这里会跟着变的，不需要手动修改。缺点是文章的标题不能同步变化。hugo常用命令\n建议使用绝对路径（根目录为content目录），而非相对路径，否则容易出错 只有所引用的文件与当前文件在同一文件夹下时可以使用相对路径的方式（只有文件名） 1 [hugo常用命令]({{哈哈\u0026lt; ref \u0026#34;/post/2025-04/hugo快捷命令.md\u0026#34; \u0026gt;}}) 文章内容管理 本文按时间线进行内容管理，其目录结构如下，需要注意以下几点：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 content/ └── post ├── 2025-01 │ ├── hugo博客搭建.md │ ├── git常用命令.md │ └── tools文件夹 │ ├── 1.jpg │ ├── 2.jpg │ ├── 3.png │ ├── index.md │ └── 4.png │ ├── 2025-02 │ ├── 博客搭建1.md │ ├── 博客搭建2.md │ ├── 博客搭建3.md │ ├── 博客搭建4.md │ ├── 博客搭建5.md │ ├── 博客搭建6.md │ ├── 博客搭建7.md │ ├── 博客搭建8.md │ ├── 博客搭建9.md │ └── 人生意义.md └── 博客搭建10 ├── index.md └── 博客记录说明 ├── 1.png ├── 2.png ├── 3.png ├── 4.png ├── 5.png ├── 6.png ├── 7.png ├── 8.png ├── 9.png ├── index.zh-cn.md └── index.zh-tw.md post目录下先按照年份建立子目录， 也可以按照 年/月，或者 年/月/日建立 没有图片的文章直接在一级子目录下保存 有图片的多建一级目录, md文件命名为index.lang.md(使用其他命名文件，图片不能显示), 图片放在同一目录/子文件夹 不同语言的md文件，放在一起，统一用不同的index.lang.md区分， 比如 index.zh-cn.md, index.zh-tw.md 致谢 1、博客搭建教程\n简单来说，分为几步：\n下载解压hugo压缩包，cmd 打开命令行窗口，输入hugo new site xxxx创建文件（这里是dev） 复制hugo.exe文件到dev文件内 进入hugo官网，下载stack主题压缩包，将文件解压存储在dev\\themes文件下 将 exampleSite 样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml 在dev文件夹，输入hugo server -D，发现已经正确显示 Github Action自动部署 莱特雷-letere\nHugo+Github博客部署\n使用 Hugo + Github Pages 部署个人博客\n2、修改美化\n首先修改dev文件夹下的hugo.yaml文件 其次，主要修改的是assets、layouts、static文件夹，换新电脑时可以直接复制过去 assets/scss/custom.scss文件修改的是大部分美化样式 layouts/_default/single.html文件修改的是：如果文章有目录，则把左侧边栏换为一个返回主页的按钮，如果文章没有目录，则启用左侧边栏 layouts/page文件夹和layouts/partials文件夹修改的是友链分类相关的文件 layouts/index.html文件修改的是：添加了首页欢迎字符面板 themes/hugo-theme-stack/layouts/partials/article/components/details.html文件修改的是：添加文章字数统计功能；而该文件夹下footer.html修改的是：添加了一行代码以及新建categories.html文件实现在文章末尾也显示分类标签 themes/hugo-theme-stack/layouts/partials/footer/footer.html删除了页脚信息，更简洁 themes/hugo-theme-stack/layouts/partials/article/components/related-content.html整个文件删除或注释，这样文章底部就不会显示相关文章了 assets/scss/partials文件夹以及layouts/partials/footer文件夹修改内容：添加博客运行时间以及样式 Stack 魔改美化-Naive Koala-2篇\nHugo Stack 主题美化-阿琦同学-很全-2篇\nL1nSn0wの小窝 - Stack主题的自定义\nHugo的Stack主题美化零碎-wfg\n使用 Hugo 对博客的重建与 Stack 主题优化记录-Exnadio\u0026rsquo;s Blog\nStack 主题的自定义-折腾日记\nHugo Stack 主题配置与使用 | Bore\u0026rsquo;s Notes\nHugo博客 | stack主题修改第一站-墨纹\nHugo Stack主题装修笔记-博客运行时间\nLeonus 博客\n张洪Heo - 分享设计与科技生活\n安知鱼 - 生活明朗 万物可爱\nHugo Theme Cybe\n3、图标网站\n打开stack官方文档Stack 官方文档，在``Custom Menu`栏下可以找到推荐的图标网站\nIcons网站\n","date":"2025-04-08T22:53:36+08:00","permalink":"https://xxcjw.github.io/p/stack%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9/","title":"Stack主题修改"},{"content":"创建文章 1 hugo new post/xxx/xxx.md 预览网站 1 2 hugo server -D hugo server 两者都是用于启动 Hugo 本地开发服务器的命令，区别主要在于是否包含草稿文章方面：\nhugo server：启动一个本地开发服务器，该服务器会对项目文件的变更进行监控，一旦文件有改动，就会实时重新生成网站。不过，在生成网站内容时，它默认不会包含草稿文章。 hugo server -D：-D 是 --buildDrafts 的简写。样会启动本地开发服务器，实现对文件变更的监控和网站的实时更新与刷新。不同的是，在生成网站时会将草稿文章也包含进去。 清除缓存 1 2 3 hugo --gc hugo --gc --minify hugo server --gc -D 当预览修改文章时，发现页面没变化，可以尝试清除缓存并重新构建：\nhugo --gc：--gc 标志的作用是在构建过程中执行垃圾回收（Garbage Collection），即清除不再使用的缓存文件，这样能释放磁盘空间。如果对网站配置或内容进行了大量修改，旧的缓存不再使用，该命令能保证生成的网站是最新状态。 hugo --gc --minify：除了具备执行垃圾回收功能外，--minify 标志还会对生成的 HTML、CSS、JavaScript 等文件进行压缩。可以减小文件大小，从而提升网站的加载速度。适合在准备将网站部署到生产环境时使用，能提供更流畅的访问体验。 hugo server --gc -D：启动一个实时预览服务器，同时执行垃圾回收，确保使用的是最新的缓存。适合在开发过程中使用，当频繁修改文章内容，并希望随时预览草稿文章在内的网站效果时最方便。 发布文章 1 2 3 4 5 git init git add . git commit -m \u0026#34;xxx\u0026#34; git remote add origin {github仓库地址} git push -u origin main git init：初始化一个新的 Git 仓库，会将当前目录变为一个Git仓库。并生成一个名为 .git 的隐藏目录，包含了 Git 管理项目所需的各种配置文件和数据结构。 git add .：用于把文件的修改添加到暂存区。可以在暂存区（Git中的一个中间区域）组织和规划哪些修改要包含在下次提交中。. 代表当前目录下的所有文件和子目录。 git commit -m \u0026quot;xxx\u0026quot;：用于将暂存区的修改保存到本地仓库的历史记录中，-m 标志后面跟着的 \u0026quot;xxx\u0026quot; 是本次提交的说明信息。 git remote add origin xxx：用于管理与远程仓库（一般是GitHub创建的远仓）的连接。add 子命令用于添加一个新的远程仓库。origin 是远程仓库的默认名。这会将本地仓库与该 GitHub 仓库建立连接。 git push -u origin main：用于将本地仓库的提交推送到远程仓库。-u会将本地的 main 分支与远程仓库的 main 分支关联起来，这样在后续的推送操作中，你只需要执行 git push 即可。origin 是远程仓库的别名，main 是要推送的本地分支名称。 1 2 git push git push -u origin main git push -u origin main：除了将本地的 main 分支推送到远程 origin 仓库的 main 分支外，还会建立本地 main 分支和远程 origin/main 分支的关联。建立关联后，后续使用 git push 或 git pull 时，Git 会知道默认操作的远程分支。通常在首次将本地分支推送到远程仓库时使用，这样后续无需每次都指定远程仓库和分支。 git push：如果本地分支已经和远程分支建立了关联，使用该命令可以简化操作，快速将本地更新推送到远程。适合在本地分支和远程分支已经建立关联的情况下。 其他 1 git remote -v 查看本地仓库与哪些远程仓库进行了连接的命令。执行该命令后，会列出本地仓库所关联的所有远程仓库的别名以及对应的远程仓库的 URL 地址。这里会展示 fetch（拉取）和 push（推送）对应的地址，一般情况下二者是相同的。\n1 hugo version 查看hugo版本，我的是0.145版本。\n","date":"2025-04-08T08:37:54+08:00","permalink":"https://xxcjw.github.io/p/hugo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Hugo常用命令"},{"content":"1、接好 11111\n2、和黑 1 jaba $x_a$+1\n豆包\n","date":"2025-04-07T09:12:42+08:00","permalink":"https://xxcjw.github.io/p/%E5%A4%A7%E6%A8%A1%E5%9E%8B/","title":"大模型"}]